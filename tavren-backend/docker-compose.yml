version: '3.8'

services:
  db:
    image: postgres:15-alpine
    container_name: tavren_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_USER: ${POSTGRES_USER_SECRET}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_SECRET}
      POSTGRES_DB: tavren_db
    # SECURITY: Database ports are not exposed to the host to prevent unauthorized access
    # For local development, use one of these alternatives instead of direct port exposure:
    # 1. Access the database through the backend application API
    # 2. Use docker exec to connect to the database container directly:
    #    docker exec -it tavren_db psql -U ${POSTGRES_USER_SECRET} tavren_db
    # 3. If direct access is absolutely necessary, temporarily uncomment this and use on local dev only:
    # ports:
    #   - "127.0.0.1:5433:5432"  # Restrict to localhost connections
    networks:
      - tavren_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER_SECRET} -d tavren_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tavren_backend
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      # Mount the app directory for live reloading during development
      - ./app:/app/app
    ports:
      - "8000:8000"
    environment:
      # Use the service name 'db' as the host for the database connection
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER_SECRET}:${POSTGRES_PASSWORD_SECRET}@db:5432/tavren_db
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      MINIMUM_PAYOUT_THRESHOLD: ${MINIMUM_PAYOUT_THRESHOLD:-5.00}
      STATIC_DIR: /app/app/static
      # Security settings
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      DATA_ENCRYPTION_KEY: ${DATA_ENCRYPTION_KEY}
      ADMIN_API_KEY: ${ADMIN_API_KEY}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      # Variables needed for automatic payout checks
      AUTO_PAYOUT_MIN_TRUST_SCORE: ${AUTO_PAYOUT_MIN_TRUST_SCORE:-50.0}
      AUTO_PAYOUT_MAX_AMOUNT: ${AUTO_PAYOUT_MAX_AMOUNT:-100.0}
      # Environment indicator
      ENVIRONMENT: ${ENVIRONMENT:-development}
    depends_on:
      - db
    networks:
      - tavren_network

  redis:
    image: redis:7-alpine
    container_name: tavren-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  redis_data:

networks:
  tavren_network:
    driver: bridge

# Instructions for using environment variables:
# 1. Copy .env.docker.example to .env.docker and fill in secure values:
#    ./scripts/generate_docker_secrets.sh
#
# 2. For local development:
#    docker-compose --env-file .env.docker up -d
#
# 3. For production deployment:
#    - Review security settings using: ./scripts/check_docker_security.sh
#    - Use secure environment variables with no defaults
#    - Consider using Docker Secrets for production:
#      secrets:
#        postgres_user:
#          file: ./secrets/postgres_user.txt
#        postgres_password:
#          file: ./secrets/postgres_password.txt
#    
#      And reference them in services:
#      db:
#        environment:
#          POSTGRES_USER_FILE: /run/secrets/postgres_user
#          POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password 